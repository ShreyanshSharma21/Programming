/*******

Find out the maximum sub-array of non negative numbers from an array.
The sub-array should be continuous. That is, a sub-array created by choosing the second and fourth element and skipping the third element is invalid.

Maximum sub-array is defined in terms of the sum of the elements in the sub-array. Sub-array A is greater than sub-array B if sum(A) > sum(B).

Example:

A : [1, 2, 5, -7, 2, 3]
The two sub-arrays are [1, 2, 5] [2, 3].
The answer is [1, 2, 5] as its sum is larger than [2, 3]
NOTE: If there is a tie, then compare with segment's length and return segment which has maximum length
NOTE 2: If there is still a tie, then return the segment with minimum starting index


*******************/

vector<int> Solution::maxset(vector<int> &A) {
    int start=0,end=-1;
    int fstart=-1,fend=-1;
    int cnt=0,maxcnt=0;
    int sum=0,mx=0;
    int n = A.size();
    for(int i=0;i<n;i++){
        if(A[i]>=0){
            sum+=A[i];
            cnt++;
            end++;
        }
        if(sum>mx){
            mx = sum;
            fstart = start;
            fend = end;
        }
        else if(sum==mx&&cnt>maxcnt){
            maxcnt = cnt;
            fstart = start;
            fend = end;
        }
        if(A[i]<0){
            cnt = 0;
            start = i+1;end=i;
            sum=0;
        }
    }
    vector<int> ans;
    if(fstart!=-1 && fend!=-1){
        for(int i=fstart;i<=fend;i++)
        ans.push_back(A[i]);
    }
    return ans;
}
